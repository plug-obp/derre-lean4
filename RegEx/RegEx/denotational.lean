import ¬´RegEx¬ª.syntax
import ¬´RegEx¬ª.Language.language

-- The ùíúlphabet
variable
  { ùíú : Type* } -- ùíú because we cannot use Œ£

/--!
  # Denotational definition of star
  We need this inductive definition to side-step the termination checker
  for the denotational semantics.
  The language of ‚òÖ is defined as:
  `L e‚òÖ = {[]} ‚à™ L (e ¬∑ e‚òÖ)`
  but this does not work as a recursive definition because `L e‚òÖ` needs `L e‚òÖ`
  which diverges, which is normal since a regular expression
  can represent languages with infinitely many words
-/
inductive star (l: Language ùíú) : Language ùíú
| star_empty: star l []
| star_iter: ‚àÄ w‚ÇÅ w‚ÇÇ,
      (w‚ÇÅ ‚àà l) ‚Üí star l w‚ÇÇ
      ‚Üí------------------
      star l (w‚ÇÅ ++ w‚ÇÇ)

/--!
  # The denotational semantics of a regex is a language
-/
def ‚Ñí: Regex ùíú ‚Üí Language ùíú
| Œ¶       => ‚àÖ
| œÑ c     => { [c] }
| ùìá‚ÇÅ ‚ãÖ ùìá‚ÇÇ => (‚Ñí ùìá‚ÇÅ) * (‚Ñí ùìá‚ÇÇ)
| ùìá‚ÇÅ ‚ãÉ ùìá‚ÇÇ => ‚Ñí ùìá‚ÇÅ + ‚Ñí ùìá‚ÇÇ
| ùìá‚òÖ      => (‚Ñí ùìá)‚àó

-- lemma star_emptyL: star ‚àÖ w ‚Üí w = [] := by {
--   intro H
--   cases H with
--   | star_empty => rfl
--   | star_iter w‚ÇÅ w‚ÇÇ w‚ÇÅ_in_empty _ =>
--     exfalso
--     apply w‚ÇÅ_in_empty
-- }


-- Œµ represents the language consisting only of the empty word.
lemma mem_l_eps (w: Word ùíú): w ‚àà ‚Ñí Œµ ‚Üî w = [] := by simp [‚Ñí]

lemma eps_denotes: @‚Ñí ùíú Œµ = 1 := by simp [‚Ñí]

/--!

Equalities

-/

@[simp]
lemma empty_denotes: ‚Ñí (Œ¶: Regex ùíú) = ‚àÖ := rfl

@[simp]
lemma token_denotes: ‚àÄ c: ùíú, ‚Ñí (œÑ c) = {[c]} := Œª _ => rfl

@[simp]
lemma union_denotes: ‚àÄ e‚ÇÅ e‚ÇÇ: Regex ùíú, ‚Ñí (e‚ÇÅ ‚ãÉ e‚ÇÇ) = ‚Ñí e‚ÇÅ + ‚Ñí e‚ÇÇ := Œª _ _ => rfl

@[simp]
lemma concatenation_denotes: ‚àÄ e‚ÇÅ e‚ÇÇ: Regex ùíú, ‚Ñí (e‚ÇÅ ‚ãÖ e‚ÇÇ) = ‚Ñí e‚ÇÅ * ‚Ñí e‚ÇÇ := Œª _ _ => rfl

@[simp]
lemma pow_denotes: ‚àÄ e: Regex ùíú, ‚Ñí (e^n) = (‚Ñí e)^n := by {
  intro e
  induction n with
  | zero => simp [‚Ñí];
  | succ n ih => simp [‚Ñí]; rw [‚Üêih]; rfl
}

@[simp]
lemma star_denotes: ‚àÄ e: Regex ùíú, ‚Ñí (e‚òÖ) = (‚Ñí e)‚àó := Œª _ => rfl

@[simp]
lemma eps_star_denotes: @‚Ñí ùíú (Œµ‚òÖ) = 1 := by simp [‚Ñí]

@[simp]
lemma re_Œµ_concatenation: ‚àÄ e: Regex ùíú, ‚Ñí (Œµ ‚ãÖ e) = ‚Ñí e := by {
  simp [‚Ñí]
}

@[simp]
lemma re_concatenation_Œµ: ‚àÄ e: Regex ùíú, ‚Ñí (e ‚ãÖ Œµ) = ‚Ñí e := by {
  simp [‚Ñí]
}

@[simp]
lemma Œ¶_concatenation: ‚àÄ e: Regex ùíú, ‚Ñí (Œ¶ ‚ãÖ e) = ‚àÖ := by {
  simp [‚Ñí]
}

@[simp]
lemma concatenation_Œ¶: ‚àÄ e: Regex ùíú, ‚Ñí (e ‚ãÖ Œ¶) = ‚àÖ := by {
  simp [‚Ñí]
}

lemma concatenation_assoc: ‚àÄ e‚ÇÅ e‚ÇÇ e‚ÇÉ: Regex ùíú, ‚Ñí ((e‚ÇÅ ‚ãÖ e‚ÇÇ) ‚ãÖ e‚ÇÉ) = ‚Ñí (e‚ÇÅ ‚ãÖ (e‚ÇÇ ‚ãÖ e‚ÇÉ)) := by {
  simp [‚Ñí]
  intros e‚ÇÅ e‚ÇÇ e‚ÇÉ
  apply mul_assoc
}

@[simp]
lemma empty_union_e: ‚àÄ e: Regex ùíú, ‚Ñí (Œ¶ ‚ãÉ e) = ‚Ñí e := by {
  intro e
  apply funext
  intro w
  apply propext
  simp [‚Ñí]
  constructor
  . intro H
    cases H with
    | inl Hl => exfalso; exact Hl
    | inr Hr => exact Hr
  . intro H
    apply Or.inr
    exact H
}

@[simp]
lemma union_idempotent: ‚àÄ e: Regex ùíú, ‚Ñí (e ‚ãÉ e) = ‚Ñí e := by {
  intro e
  apply funext
  intro w
  apply propext
  simp [*]
  constructor
  . intro H
    cases H with
    | inl Hl => exact Hl
    | inr Hr => exact Hr
  . intro H
    apply Or.inr
    exact H
}

lemma union_comm: ‚àÄ r‚ÇÅ r‚ÇÇ: Regex ùíú, ‚Ñí (r‚ÇÅ ‚ãÉ r‚ÇÇ) = ‚Ñí (r‚ÇÇ ‚ãÉ r‚ÇÅ) := by {
  intros r‚ÇÅ r‚ÇÇ
  apply funext
  intro w
  apply propext
  simp [‚Ñí]
  constructor
  . intro H
    cases H with
    | inl Hl => apply Or.inr; exact Hl
    | inr Hr => apply Or.inl; exact Hr
  . intro H
    cases H with
    | inl Hl => apply Or.inr; exact Hl
    | inr Hr => apply Or.inl; exact Hr
}

lemma union_assoc: ‚àÄ r‚ÇÅ r‚ÇÇ r‚ÇÉ: Regex ùíú, ‚Ñí ((r‚ÇÅ ‚ãÉ r‚ÇÇ) ‚ãÉ r‚ÇÉ) = ‚Ñí (r‚ÇÅ ‚ãÉ (r‚ÇÇ ‚ãÉ r‚ÇÉ)) := by {
  simp [‚Ñí]
  intros r‚ÇÅ r‚ÇÇ r‚ÇÉ
  apply add_assoc
}

lemma eps_mem_union_iff (e‚ÇÅ e‚ÇÇ: Regex ùíú): [] ‚àà (‚Ñí e‚ÇÅ + ‚Ñí e‚ÇÇ) ‚Üî ([] ‚àà ‚Ñí e‚ÇÅ ‚à® [] ‚àà ‚Ñí e‚ÇÇ) := by {
  apply Iff.intro
  . intro H
    cases H with
    | inl Hl => apply Or.inl; exact Hl
    | inr Hr => apply Or.inr; exact Hr
  . intro H
    cases H with
    | inl Hl => apply Or.inl; exact Hl
    | inr Hr => apply Or.inr; exact Hr
}

@[simp]
lemma union_empty: ‚àÄ r: Regex ùíú, ‚Ñí (r ‚ãÉ Œ¶) = ‚Ñí r := by {
  intro r
  apply funext
  intro w
  apply propext
  simp [‚Ñí]
  constructor
  . intro H
    cases H with
    | inl Hl => exact Hl
    | inr Hr => exfalso; exact Hr
  . intro H
    apply Or.inl
    exact H
}

@[simp]
lemma empty_union: ‚àÄ r: Regex ùíú, ‚Ñí (Œ¶ ‚ãÉ r) = ‚Ñí r := by {
  intro r
  rw [union_comm]
  apply union_empty
}

@[simp]
lemma Œµ_mem_star: ‚àÄ e: Regex ùíú, [] ‚àà ‚Ñí (e‚òÖ) := by {
  intro e
  simp [‚Ñí]
  exists 0
}

@[simp]
lemma star_star: ‚àÄ e: Regex ùíú, ‚Ñí (e‚òÖ‚òÖ) = ‚Ñí (e‚òÖ) := by {
  simp [‚Ñí]
}

lemma eps_in_each_eps_in_concat (e‚ÇÅ e‚ÇÇ: Regex ùíú): [] ‚àà ‚Ñí e‚ÇÅ ‚Üí [] ‚àà ‚Ñí e‚ÇÇ ‚Üí [] ‚àà ‚Ñí (e‚ÇÅ ‚ãÖ e‚ÇÇ) := by {
  intros h‚ÇÅ h‚ÇÇ
  simp [‚Ñí]
  tauto
}

lemma eps_in_concat_eps_in_both (e‚ÇÅ e‚ÇÇ: Regex ùíú): [] ‚àà (‚Ñí e‚ÇÅ * ‚Ñí e‚ÇÇ) ‚Üí ([] ‚àà ‚Ñí e‚ÇÅ ‚àß [] ‚àà ‚Ñí e‚ÇÇ) := by {
  intro H
  let ‚ü®_, _, hx, hy, hxy‚ü© := H
  simp [*] at *
  simp [nil_append_nil] at *
  rw [hxy.1] at hx
  rw [hxy.2] at hy
  exact ‚ü®hx, hy‚ü©
}

lemma eps_in_both_eps_in_e‚ÇÅ (e‚ÇÅ e‚ÇÇ: Regex ùíú): [] ‚àà (‚Ñí e‚ÇÅ * ‚Ñí e‚ÇÇ) ‚Üí [] ‚àà ‚Ñí e‚ÇÅ :=
  Œª H ‚Ü¶ eps_in_concat_eps_in_both e‚ÇÅ e‚ÇÇ H |>.1

lemma eps_in_both_eps_in_e‚ÇÇ (e‚ÇÅ e‚ÇÇ: Regex ùíú): [] ‚àà (‚Ñí e‚ÇÅ * ‚Ñí e‚ÇÇ) ‚Üí [] ‚àà ‚Ñí e‚ÇÇ :=
  Œª H ‚Ü¶ eps_in_concat_eps_in_both e‚ÇÅ e‚ÇÇ H |>.2

lemma eps_in_each_eps_in_concat' (e‚ÇÅ e‚ÇÇ: Regex ùíú): [] ‚àà ‚Ñí e‚ÇÅ ‚àß [] ‚àà ‚Ñí e‚ÇÇ ‚Üí [] ‚àà ‚Ñí (e‚ÇÅ ‚ãÖ e‚ÇÇ) := by {
  rintro ‚ü® h‚ÇÅ, h‚ÇÇ‚ü©
  simp [‚Ñí]
  tauto
}

lemma eps_mem_concat_iff (e‚ÇÅ e‚ÇÇ: Regex ùíú): [] ‚àà (‚Ñí e‚ÇÅ * ‚Ñí e‚ÇÇ) ‚Üî ([] ‚àà ‚Ñí e‚ÇÅ ‚àß [] ‚àà ‚Ñí e‚ÇÇ) := by {
  apply Iff.intro
  . apply eps_in_concat_eps_in_both
  . apply eps_in_each_eps_in_concat'
}

/--!
  ‚Ñí induces a denotation-based (set-based) equivalence relation, so we can get a quotient type
-/

def ‚Ñí_equiv (e‚ÇÅ e‚ÇÇ: Regex ùíú): Prop := ‚àÄ w: Word ùíú, w ‚àà ‚Ñí e‚ÇÅ ‚Üî w ‚àà ‚Ñí e‚ÇÇ
infix:50 " ~ " => ‚Ñí_equiv

lemma ‚Ñí_equiv_refl:
  ‚àÄ e: Regex ùíú, e ~ e
:= by simp [‚Ñí_equiv]
lemma ‚Ñí_equiv_symm:
  ‚àÄ {e‚ÇÅ e‚ÇÇ: Regex ùíú}, e‚ÇÅ ~ e‚ÇÇ ‚Üí e‚ÇÇ ~ e‚ÇÅ
:= by {
    simp [‚Ñí_equiv]
    intros e‚ÇÅ e‚ÇÇ h w
    specialize h w
    rw [h]
}
lemma ‚Ñí_equiv_trans:
  ‚àÄ {e‚ÇÅ e‚ÇÇ e‚ÇÉ: Regex ùíú}, e‚ÇÅ ~ e‚ÇÇ ‚Üí e‚ÇÇ ~ e‚ÇÉ ‚Üí e‚ÇÅ ~ e‚ÇÉ
:= by {
    simp [‚Ñí_equiv]
    intros e‚ÇÅ e‚ÇÇ e‚ÇÉ h‚ÇÅ‚ÇÇ h‚ÇÇ‚ÇÉ w
    specialize h‚ÇÅ‚ÇÇ w
    specialize h‚ÇÇ‚ÇÉ w
    rw [h‚ÇÅ‚ÇÇ, h‚ÇÇ‚ÇÉ]
}
theorem ‚Ñí_equiv_is_equivalence: Equivalence (@‚Ñí_equiv ùíú) := ‚ü®‚Ñí_equiv_refl, ‚Ñí_equiv_symm, ‚Ñí_equiv_trans‚ü©

instance Regex.to‚ÑíSetoid: Setoid (Regex ùíú) := ‚ü®‚Ñí_equiv, ‚Ñí_equiv_is_equivalence ‚ü©

def Regex‚Ñí (Œ± : Type u) : Type u := Quotient (@Regex.to‚ÑíSetoid Œ±)

@[simp]
def rL(e: Regex ùíú): Regex‚Ñí ùíú := Quotient.mk' e
@[simp ]
def concat: Regex‚Ñí ùíú ‚Üí Regex‚Ñí ùíú ‚Üí Regex‚Ñí ùíú :=
  Quotient.lift‚ÇÇ
    (Œª e‚ÇÅ e‚ÇÇ => rL (e‚ÇÅ ‚ãÖ e‚ÇÇ))
    (Œª e‚ÇÅ e‚ÇÇ e‚ÇÉ e‚ÇÑ e‚ÇÅe‚ÇÉ e‚ÇÇe‚ÇÑ =>
      by {
        apply Quotient.sound
        intro w
        dsimp
        have he‚ÇÅe‚ÇÉ: ‚Ñí e‚ÇÅ = ‚Ñí e‚ÇÉ := by ext ww; exact e‚ÇÅe‚ÇÉ ww
        have he‚ÇÇe‚ÇÑ: ‚Ñí e‚ÇÇ = ‚Ñí e‚ÇÑ := by ext ww; exact e‚ÇÇe‚ÇÑ ww
        rw [he‚ÇÅe‚ÇÉ, he‚ÇÇe‚ÇÑ]
      })

lemma Œ¥_concatenation_eq_eps(e‚ÇÅ e‚ÇÇ: Regex‚Ñí ùíú) : concat (e‚ÇÅ) (e‚ÇÇ) = (rL Œµ) ‚Üî e‚ÇÅ = rL Œµ ‚àß e‚ÇÇ = rL Œµ := by {
  sorry
}
